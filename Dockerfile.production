# Multi-stage production Dockerfile for FoodXchange Backend
# Optimized for production deployment with security and performance

# Stage 1: Base dependencies
FROM node:18-alpine AS base

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    dumb-init \
    curl \
    tzdata \
    ca-certificates \
    && rm -rf /var/cache/apk/*

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Copy package files
COPY package*.json ./

# Stage 2: Development dependencies
FROM base AS deps

# Install all dependencies
RUN npm ci --only=production && npm cache clean --force

# Stage 3: Build stage
FROM base AS build

# Install all dependencies (including dev)
COPY package*.json ./
RUN npm ci

# Copy source code
COPY . .

# Build TypeScript
RUN npm run build

# Stage 4: Production runtime
FROM base AS production

# Set production environment
ENV NODE_ENV=production
ENV PORT=5000
ENV HOST=0.0.0.0

# Copy production dependencies
COPY --from=deps --chown=nextjs:nodejs /app/node_modules ./node_modules

# Copy built application
COPY --from=build --chown=nextjs:nodejs /app/dist ./dist

# Copy necessary files
COPY --from=build --chown=nextjs:nodejs /app/package*.json ./
COPY --from=build --chown=nextjs:nodejs /app/scripts ./scripts

# Create required directories
RUN mkdir -p /app/logs /app/uploads /app/temp && \
    chown -R nextjs:nodejs /app/logs /app/uploads /app/temp

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/api/health || exit 1

# Start application with dumb-init
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/server.js"]

# Stage 5: Development stage
FROM base AS development

# Install all dependencies
COPY package*.json ./
RUN npm ci

# Copy source code
COPY . .

# Switch to non-root user
USER nextjs

# Expose ports
EXPOSE 5000 9229

# Development command with nodemon
CMD ["npm", "run", "dev"]