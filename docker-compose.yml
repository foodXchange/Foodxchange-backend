version: '3.8'

services:
  # FoodXchange Backend Application
  foodxchange-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: foodxchange-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
      - "9090:9090"  # Metrics port
    environment:
      - NODE_ENV=production
      - PORT=5000
      - HOST=0.0.0.0
      - MONGODB_URI=mongodb://mongo:27017/foodxchange
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-production-jwt-secret-change-this
      - JWT_REFRESH_SECRET=your-production-refresh-secret-change-this
      - LOG_LEVEL=info
      - METRICS_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
      - PERFORMANCE_MONITORING_ENABLED=true
      - FEATURE_CACHING=true
      - FEATURE_RATE_LIMITING=true
      - FEATURE_ANALYTICS=true
    depends_on:
      - mongo
      - redis
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - foodxchange-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database
  mongo:
    image: mongo:7.0
    container_name: foodxchange-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=foodxchange
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - foodxchange-network
    command: --auth

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: foodxchange-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - foodxchange-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: foodxchange-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - foodxchange-backend
    networks:
      - foodxchange-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: foodxchange-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    depends_on:
      - foodxchange-backend
    networks:
      - foodxchange-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: foodxchange-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - foodxchange-network

volumes:
  mongo-data:
    driver: local
  mongo-config:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  foodxchange-network:
    driver: bridge