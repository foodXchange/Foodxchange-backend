name: Deploy FoodXchange Backend

on:
  push:
    branches:
      - main
      - staging
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  NODE_VERSION: '18.x'
  AZURE_WEBAPP_PACKAGE_PATH: '.'

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine.outputs.environment }}
    steps:
      - id: determine
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: ubuntu-latest
    needs: determine-environment
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test
      env:
        CI: true

    - name: Run linter
      run: npm run lint

    - name: Build application
      run: npm run build

    - name: Upload artifacts for deployment
      uses: actions/upload-artifact@v4
      with:
        name: node-app
        path: |
          dist/
          package.json
          package-lock.json
          web.config
          .env.example

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [determine-environment, build]
    environment: ${{ needs.determine-environment.outputs.environment }}
    if: github.event_name != 'pull_request'
    
    outputs:
      appServiceName: ${{ steps.deploy.outputs.appServiceName }}
      resourceGroupName: ${{ steps.deploy.outputs.resourceGroupName }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Bicep template
      id: deploy
      uses: azure/arm-deploy@v1
      with:
        scope: subscription
        region: eastus
        template: ./infrastructure/main.bicep
        parameters: ./infrastructure/parameters/${{ needs.determine-environment.outputs.environment }}.parameters.json
        failOnStdErr: false

    - name: Output deployment results
      run: |
        echo "App Service Name: ${{ steps.deploy.outputs.appServiceName }}"
        echo "App Service URL: ${{ steps.deploy.outputs.appServiceUrl }}"
        echo "Key Vault URI: ${{ steps.deploy.outputs.keyVaultUri }}"

  deploy-application:
    runs-on: ubuntu-latest
    needs: [determine-environment, build, deploy-infrastructure]
    environment: 
      name: ${{ needs.determine-environment.outputs.environment }}
      url: ${{ steps.deploy.outputs.app-url }}
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: node-app

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Web App
      id: deploy
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ needs.deploy-infrastructure.outputs.appServiceName }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    - name: Check deployment health
      run: |
        sleep 30
        response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ needs.deploy-infrastructure.outputs.appServiceName }}.azurewebsites.net/api/health)
        if [ $response -eq 200 ]; then
          echo "Health check passed!"
        else
          echo "Health check failed with status code: $response"
          exit 1
        fi

  production-approval:
    runs-on: ubuntu-latest
    needs: [determine-environment]
    if: needs.determine-environment.outputs.environment == 'prod' && github.event_name != 'pull_request'
    environment: production-approval
    steps:
      - name: Production deployment approval
        run: echo "Production deployment approved"

  cleanup:
    runs-on: ubuntu-latest
    needs: [build, deploy-application]
    if: always()
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: node-app