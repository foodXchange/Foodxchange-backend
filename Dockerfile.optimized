# Multi-stage Optimized Dockerfile for FoodXchange Backend

# Stage 1: Dependencies
FROM node:18-alpine AS dependencies
WORKDIR /app
# Copy only package files for better caching
COPY package*.json ./
# Install production dependencies only
RUN npm ci --only=production --no-audit --no-fund

# Stage 2: Build
FROM node:18-alpine AS builder
# Install build dependencies
RUN apk add --no-cache python3 make g++ 
WORKDIR /app
# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
# Install all dependencies (including dev)
RUN npm ci --no-audit --no-fund
# Copy source code
COPY src ./src
COPY shared ./shared
# Build application
RUN npm run build
# Remove source maps for smaller image
RUN find dist -name "*.map" -delete

# Stage 3: Production
FROM node:18-alpine AS production
# Install production runtime dependencies
RUN apk add --no-cache dumb-init curl \
    && rm -rf /var/cache/apk/*
# Create non-root user
RUN addgroup -g 1001 -S nodejs \
    && adduser -S nodejs -u 1001
WORKDIR /app
# Copy production dependencies
COPY --from=dependencies --chown=nodejs:nodejs /app/node_modules ./node_modules
# Copy built application
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/package*.json ./
# Create necessary directories with proper permissions
RUN mkdir -p logs uploads temp \
    && chown -R nodejs:nodejs logs uploads temp
# Set environment
ENV NODE_ENV=production \
    NODE_OPTIONS="--max-old-space-size=2048 --enable-source-maps" \
    UV_THREADPOOL_SIZE=16
# Switch to non-root user
USER nodejs
# Expose ports
EXPOSE 5000 9090
# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:5000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"
# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]
# Start application with cluster mode
CMD ["node", "--enable-source-maps", "dist/server-new.js"]