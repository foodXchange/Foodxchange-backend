const mongoose = require('mongoose');

// RFQ Schema - Request for Quotation
const rfqSchema = new mongoose.Schema({
    // Basic Information
    rfqNumber: {
        type: String,
        required: true,
        unique: true,
        default: function() {
            return 'RFQ-' + Date.now();
        }
    },
    title: {
        type: String,
        required: true,
        maxlength: 200
    },
    description: {
        type: String,
        required: true,
        maxlength: 2000
    },
    
    // Buyer Information
    buyer: {
        companyId: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Company',
            required: true
        },
        contactPerson: {
            name: String,
            email: String,
            phone: String
        }
    },
    
    // Product Requirements
    products: [{
        productName: {
            type: String,
            required: true
        },
        category: {
            type: String,
            required: true
        },
        specifications: {
            type: String,
            required: true
        },
        quantity: {
            amount: {
                type: Number,
                required: true,
                min: 1
            },
            unit: {
                type: String,
                required: true,
                enum: ['kg', 'tons', 'containers', 'pieces', 'liters', 'cubic_meters']
            }
        },
        qualityRequirements: {
            certifications: [String],
            standards: [String],
            customRequirements: String
        }
    }],
    
    // Delivery & Terms
    delivery: {
        preferredDate: {
            type: Date,
            required: true
        },
        deadline: {
            type: Date,
            required: true
        },
        location: {
            country: String,
            city: String,
            port: String,
            address: String
        },
        incoterms: {
            type: String,
            enum: ['FOB', 'CIF', 'CFR', 'EXW', 'DDP', 'DDU', 'FCA', 'CPT', 'CIP'],
            default: 'FOB'
        }
    },
    
    // Commercial Terms
    commercial: {
        currency: {
            type: String,
            default: 'USD',
            enum: ['USD', 'EUR', 'GBP', 'CNY', 'JPY', 'AUD', 'CAD']
        },
        paymentTerms: {
            type: String,
            enum: ['30_days', '60_days', '90_days', 'advance_payment', 'letter_of_credit', 'cash_on_delivery'],
            default: '30_days'
        },
        budgetRange: {
            min: Number,
            max: Number
        }
    },
    
    // RFQ Process
    process: {
        status: {
            type: String,
            enum: ['draft', 'published', 'active', 'closed', 'cancelled', 'awarded'],
            default: 'draft'
        },
        visibility: {
            type: String,
            enum: ['public', 'private', 'invited_only'],
            default: 'public'
        },
        responseDeadline: {
            type: Date,
            required: true
        },
        invitedSuppliers: [{
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Company'
        }],
        responseCount: {
            type: Number,
            default: 0
        }
    },
    
    // AI-Enhanced Features
    aiEnhanced: {
        autoGenerated: {
            type: Boolean,
            default: false
        },
        emailTemplate: {
            subject: String,
            body: String,
            generatedAt: Date
        },
        supplierMatching: {
            suggestedSuppliers: [{
                supplierId: {
                    type: mongoose.Schema.Types.ObjectId,
                    ref: 'Company'
                },
                matchScore: Number,
                matchReasons: [String]
            }],
            matchingCriteria: {
                productCategory: Boolean,
                geographicLocation: Boolean,
                certifications: Boolean,
                pastPerformance: Boolean
            }
        },
        riskAssessment: {
            riskScore: {
                type: Number,
                min: 0,
                max: 100
            },
            riskFactors: [String],
            mitigationSuggestions: [String]
        }
    },
    
    // Attachments & Documents
    attachments: [{
        fileName: String,
        fileUrl: String,
        fileType: String,
        uploadedAt: {
            type: Date,
            default: Date.now
        },
        description: String
    }],
    
    // Tracking & Analytics
    tracking: {
        views: {
            type: Number,
            default: 0
        },
        viewedBy: [{
            companyId: {
                type: mongoose.Schema.Types.ObjectId,
                ref: 'Company'
            },
            viewedAt: {
                type: Date,
                default: Date.now
            }
        }],
        downloadCount: {
            type: Number,
            default: 0
        }
    }
}, {
    timestamps: true,
    toJSON: { virtuals: true },
    toObject: { virtuals: true }
});

// Indexes for performance
rfqSchema.index({ 'buyer.companyId': 1 });
rfqSchema.index({ 'process.status': 1 });
rfqSchema.index({ 'process.responseDeadline': 1 });
rfqSchema.index({ 'products.category': 1 });
rfqSchema.index({ createdAt: -1 });

// Virtual fields
rfqSchema.virtual('daysUntilDeadline').get(function() {
    if (!this.process.responseDeadline) return null;
    const now = new Date();
    const deadline = new Date(this.process.responseDeadline);
    const diffTime = deadline - now;
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
});

rfqSchema.virtual('isActive').get(function() {
    return this.process.status === 'active' && 
           new Date() < new Date(this.process.responseDeadline);
});

// Pre-save middleware
rfqSchema.pre('save', function(next) {
    // Auto-generate RFQ number if not provided
    if (!this.rfqNumber) {
        this.rfqNumber = 'RFQ-' + Date.now();
    }
    
    // Validate deadline is in the future
    if (this.process.responseDeadline <= new Date()) {
        return next(new Error('Response deadline must be in the future'));
    }
    
    next();
});

// Static methods
rfqSchema.statics.findActiveRFQs = function() {
    return this.find({
        'process.status': 'active',
        'process.responseDeadline': { $gt: new Date() }
    });
};

rfqSchema.statics.findByCategory = function(category) {
    return this.find({
        'products.category': category,
        'process.status': { $in: ['active', 'published'] }
    });
};

// Instance methods
rfqSchema.methods.addView = function(companyId) {
    this.tracking.views += 1;
    if (companyId) {
        this.tracking.viewedBy.push({
            companyId: companyId,
            viewedAt: new Date()
        });
    }
    return this.save();
};

rfqSchema.methods.updateStatus = function(newStatus) {
    this.process.status = newStatus;
    return this.save();
};

module.exports = mongoose.model('RFQ', rfqSchema);
